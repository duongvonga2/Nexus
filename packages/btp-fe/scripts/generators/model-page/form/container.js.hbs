import { useEffect, useState } from 'react';
import { Layout } from 'components/Layout';
import { useTranslation } from 'react-i18next';
import styled from 'styled-components';
import { useDispatch, useSelector } from 'hooks';
import { ROUTES } from 'utils/routeConstants';
import { menuList } from 'utils/menu';
import { getAttributesForForm, handleGetFiltersInfo, handleRenderInput } from 'utils/app';
import { addStoreModel } from 'utils/addStoreModel';
import { TitlePage } from 'components/TitlePage';
import { Form, Button } from 'antd';
import {{camelCase model}}Model from 'containers/{{properCase name}}/List/{{camelCase model}}Model';
import ATTRIBUTES from 'containers/{{properCase name}}/attributes';

const { Item } = Form;
const queryString = require('query-string');

addStoreModel({{camelCase model}}Model);

const breadcrumbItems = [
  { title: '{{sentenceCase name}}', link: ROUTES.{{constantCase name}}_LIST },
  { title: 'Add', link: ROUTES.CREATE_{{constantCase name}} },
];

const StyledLayout = styled(Layout)`
  .main {
    padding: 16px 0;
    .content-cover {
      width: 400px;
      margin: auto;
    }
  }
`;

const formItemLayout = {
    labelCol: {
      span: 24,
    },
    wrapperCol: {
      span: 24,
    },
};

const {{properCase formContainer}} = ({location}) => {
  const { t } = useTranslation();

  const parsed = queryString.parse(location.search);
  const isEditPage = location.pathname === ROUTES.EDIT_{{constantCase name}};
  const { id } = parsed;
  console.log('-location', id);

  const [form] = Form.useForm();

  const [{{camelCase name}}InfoById, set{{properCase name}}InfoById] = useState({});

   const {{camelCase name}}List = useSelector((state) => state.{{camelCase model}}Model.{{camelCase model}}s);

  useEffect(() => {
    const edited{{properCase name}} = isEditPage ?  {{camelCase name}}List.find((item) => item.id == id) : {};
    if (!edited{{properCase name}}) return;

    const initialValues = isEditPage
      ? {
          ...edited{{properCase name}},
        }
      : {};

    set{{properCase name}}InfoById(initialValues);
    form.setFieldsValue(initialValues);
  }, [form, isEditPage, {{camelCase name}}List, id]);

  const { add{{properCase model}}, update{{properCase model}} } = useDispatch(({ {{camelCase model}}Model }) => ({
    add{{properCase model}}: {{camelCase model}}Model.create,
    update{{properCase model}}: {{camelCase model}}Model.update,
  }));

  const {{camelCase name}}Attributes = handleGetFiltersInfo(getAttributesForForm(ATTRIBUTES));
  const onFinish = (values) => {
    console.log(values);
    if (isEditPage) {
      update{{properCase model}}({
        ...{{camelCase name}}InfoById,
        ...values,
      });
    } else {
      add{{properCase model}}({
        ...values,
         id: {{camelCase name}}List.length + 1,
      });
      form.resetFields();
    }
  };
  return (
    <StyledLayout
      menuOpenedKey={'{{properCase name}}'}
      menuSelectedKey={'Form{{properCase name}}'}
      menuList={menuList}
      breadcrumbItems={breadcrumbItems}
    >
      <TitlePage titleText={isEditPage ? 'Edit {{sentenceCase name}}' : 'Create {{sentenceCase name}}'} align='center' />
      <Form {...formItemLayout} form={form} name='{{camelCase name}}' onFinish={onFinish} className='content-cover'>
          { {{camelCase name}}Attributes?.map((item, index) => (
              <Item name={item.attribute} label={item.attribute} key={index} rules={[{ required: true, message: t('form.required', 'Required'),},]}>
                {handleRenderInput(item.attribute,  {{camelCase name}}Attributes)}
              </Item>
          ))}
          <Item>
            <Button type="primary" htmlType="submit">
              {isEditPage ? t('form.update', 'Update') : t('form.create', 'Create')}
            </Button>
          </Item>
      </Form>
    </StyledLayout>
  );
};

export default {{properCase formContainer}};

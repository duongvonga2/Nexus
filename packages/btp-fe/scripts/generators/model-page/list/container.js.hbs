import { useEffect } from 'react';
import { Layout } from 'components/Layout';
import { useTranslation } from 'react-i18next';
import styled from 'styled-components';
import { ROUTES } from 'utils/routeConstants';
import { menuList } from 'utils/menu';
import { Table } from 'components/Table';
import { EditOutlined, DeleteOutlined } from '@ant-design/icons';
import { Button, Popconfirm } from 'antd';
import { useDispatch, useSelector } from 'hooks';
import { TitlePage } from 'components/TitlePage';
import { FilterBox } from 'components/FilterBox';
import { handleGetFiltersInfo } from 'utils/app';
import ATTRIBUTES from 'containers/{{properCase name}}/attributes';

import {{camelCase model}}Model from './{{camelCase model}}Model';
import { addStoreModel } from 'utils/addStoreModel';

addStoreModel({{camelCase model}}Model);

const breadcrumbItems = [
  { title: '{{sentenceCase name}}', link: ROUTES.{{constantCase name}}_LIST },
  { title: 'Add', link: ROUTES.{{constantCase name}}_LIST },
];

const StyledLayout = styled(Layout)`
  .main {
    padding: 16px 0;
    .content-cover {
      width: 600px;
    }
  }

  .table-list {
    padding: 24px;
  }

  .btn {
    margin-right: 5px;
    border-radius: 4px;
    font-size: 1.4rem;
  }

  .add-btn {
    display: flex;
    align-items: center;
    margin: 0 20px 0 auto;
    background: none;
    padding: 8px 8px 7px 7px;
    border-radius: 4px;
    border: 1px solid #ccc;

    span {
      margin-right: 3px;
    }

    svg {
      font-size: 16px;
    }
  }

  .{{dashCase name}}-filter-box {
    padding: 0 20px;
  }
`;

function onChangePagination(page, pageSize) {
  console.log('page', page);
  console.log('pageSize', pageSize);
}

const {{properCase name}}List = ({ history }) => {
  const { t } = useTranslation();

  const { delete{{properCase model}}, fetch{{properCase model}}s, setFirstLoad } = useDispatch(({ {{camelCase model}}Model, app }) => ({
    delete{{properCase model}}: {{camelCase model}}Model.delete,
    fetch{{properCase model}}s: {{camelCase model}}Model.fetch{{properCase model}}s,
    setFirstLoad: app.setFirstLoad,
  }));

  const {{camelCase model}}s = useSelector((state) => state.{{camelCase model}}Model.{{camelCase model}}s);
  const isFirstLoad = useSelector((state) => state.app.isFirstLoad);

  useEffect(() => {
    if (!{{camelCase model}}s.length && !isFirstLoad) {
      // Temporary fixing: getUserList() was called for first load of page.
      fetch{{properCase model}}s();
    }
    setFirstLoad(true);
  }, [fetch{{properCase model}}s, isFirstLoad, setFirstLoad, {{camelCase model}}s]);

  const columns = [
    {{#each attr}}
      {
        title: t('{{camelCase ../name}}.{{this}}', '{{titleCase this}}'),
        dataIndex: '{{this}}',
        key: '{{this}}',
      },
    {{/each}}
    {
      title: t('{{camelCase name}}.action', 'Action'),
      dataIndex: 'action',
      // eslint-disable-next-line react/display-name
      render: (v, i) => (
        <>
          <Button
            className="btn"
            icon={<EditOutlined />}
            onClick={() => {
              history.push(`${{curly true}}ROUTES.EDIT_{{constantCase name}}{{curly}}?id=${encodeURIComponent(i.id)}`);
            }}
          ></Button>
          <Popconfirm
            placement="topRight"
            title={t('{{camelCase name}}.delete_confirmation', 'Are you sure to delete this {{titleCase name}}?')}
            onConfirm={() => delete{{properCase model}}(i.id)}
            okText={t('confirmation.yes', 'Yes')}
            cancelText={t('confirmation.no', 'No')}
          >
            <Button className="btn" icon={<DeleteOutlined />}></Button>
          </Popconfirm>
        </>
      ),
    },
  ];

  const handleSubmitFilter = (formFilter) => {
    fetch{{properCase model}}s(formFilter.filters)
  };

  return (
    <StyledLayout
      menuOpenedKey={'{{properCase name}}'}
      menuSelectedKey={'{{properCase name}}List'}
      menuList={menuList}
      breadcrumbItems={breadcrumbItems}
    >
      <TitlePage titleText='{{sentenceCase name}} List' />
      <FilterBox
        className="{{dashCase name}}-filter-box"
        filtersData={handleGetFiltersInfo(ATTRIBUTES)}
        handleSubmit={handleSubmitFilter}
      />
      <Table
        className="table-list"
        columns={columns}
        dataSource={{curly true}}{{camelCase model}}s{{curly}}
        multiSelect
        onChangePagination={onChangePagination}
        scroll={{curly true}}{{curly true}} x: 1500 {{curly}}{{curly}}
        sticky
        rowKey="id"
      />
    </StyledLayout>
  );
};

export default {{properCase name}}List;
